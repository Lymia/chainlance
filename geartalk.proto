// Protobuf messages for the protocol spoken by 'gearlanced'.

syntax = "proto2";

package geartalk;

// Results of a single full joust.
message Joust {
  // Normal and reversed-polarity score array.
  // The value 1 indicates a win, 0 a tie, -1 a loss for the tested program.
  repeated sint32 sieve_points = 1  [packed=true];
  repeated sint32 kettle_points = 2 [packed=true];

  // Full joust-level statistics, set when running as cranklanced.

  // Total number of cycles; sum of Statistics.cycles values.
  optional uint32 cycles = 3;
}

// Program execution statistics for visualization.
message Statistics {
  // Number of executed cycles.
  optional uint32 cycles = 1;

  // In the following tape-related statistics, if the comment is marked as [2x],
  // the array is twice the size of the current tape length. The first half
  // corresponds to statistics for the left program, while the second half
  // corresponds to the right program. In both cases, the tape is stored
  // "unflipped", as seen from the perspective of the left program.

  // Absolute value of tape at the end of the joust.
  optional bytes tape_abs = 2;
  // [2x] Largest value left on tape when the program moved away from a cell.
  optional bytes tape_max = 3;

  // [2x] Heatmap of how long the tape pointer spent on the cell.
  repeated uint32 heat_position = 4 [packed=true];
  // [2x] Heatmap of how many times the program modified this cell.
  repeated uint32 heat_modify = 5   [packed=true];
}

// Command specifier. See gearlanced.c comments for more details.
enum Action {
  // Not valid; gearlanced will exit if sent.
  UNKNOWN = 0;
  // Test a program against the hill.
  TEST = 1;
  // Set a program on the hill.
  SET = 2;
  // Clear a program on the hill.
  UNSET = 3;
}

// Command message to gearlanced.
message Command {
  // Which command to perform.
  optional Action action = 1;
  // Hill program index, if relevant for the command.
  optional uint32 index = 2;
}

// Reply from gearlanced.
message Reply {
  // Success indicator, always set.
  optional bool ok = 1;
  // Error message, set if not ok.
  optional string error = 2;
  // Set when running as cranklanced and generating statistics.
  optional bool with_statistics = 3;
}
